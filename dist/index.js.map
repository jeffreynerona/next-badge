{"version":3,"sources":["../src/index.js"],"names":["LocalStrategy","require","Strategy","io","RateLimit","app","server","createServer","enable","limiter","windowMs","max","delayMs","use","req","res","next","header","json","limit","bodyLimit","initialize","User","usernameField","passwordField","email","password","findOne","err","user","validPassword","passReqToCallback","console","log","process","nextTick","newUser","fullname","body","generateHash","type","coins","username","save","serializeUser","done","id","deserializeUser","findById","on","client","qrgenerator","event","eventid","interval","x","setInterval","emit","clearInterval","port","listen","address"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport mongoose from 'mongoose';\nimport passport from 'passport';\nconst LocalStrategy = require('passport-local').Strategy;\nconst io = require('socket.io')();\n\nimport config from './config';\nimport routes from './routes';\n\nvar RateLimit = require('express-rate-limit');\n\nlet app = express();\napp.server = http.createServer(app);\n\n// middleware\n// limiter\napp.enable('trust proxy'); // only if you're behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n \nvar limiter = new RateLimit({\n  windowMs: 15*60*1000, // 15 minutes \n  max: 1000, // limit each IP to 100 requests per windowMs \n  delayMs: 0 // disable delaying - full speed until the max limit is reached \n});\n \n//  apply to all requests \napp.use(limiter);\n\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET,HEAD,OPTIONS,POST,PUT,DELETE\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n  next();\n});\n\n// parese application/json\napp.use(bodyParser.json({\n\tlimit: config.bodyLimit\n}));\n// passport config\napp.use(passport.initialize());\nlet User = require('./model/user');\n\npassport.use('local-login', new LocalStrategy({\n\tusernameField: 'email',\n\tpasswordField: 'password'\n},\n\tfunction(email, password, next) {\n    User.findOne({email: email}, function(err, user){\n\n      if (err) { return next(err); }\n      if (!user) { return next('Incorrect Email or Password'); } \n      \n      if (!user.validPassword(password)) {\n      \treturn next('Incorrect Email or Password');\n      }\n\n      return next(null, user);\n    });\n  }\n));\n\npassport.use('local-register', new LocalStrategy({\n\tusernameField: 'email',\n\tpasswordField: 'password',\n\tpassReqToCallback: true\n},\n\tfunction(req, email, password, next) {\n\t\tconsole.log(email +\" \"+ password)\n\t\tprocess.nextTick(function() {\n\n\t    User.findOne({email: email}, function(err, user){\n\t    \tconsole.log(user);\n\t      if (err) { \n\t      \tconsole.log(\"stops at err\");\n\t      \tnext(err); \n\t      }\n\t      if (user) {\n\t      \tconsole.log(\"stops at err\");\n       \t\tnext('Email is already used.');\n\t     } \n\n\t      var newUser = new User();\n\t      newUser.email    = email;\n\t      newUser.fullname = req.body.fullname;\n\t      newUser.password = newUser.generateHash(password);\n\t      newUser.type = \"user\";\n\t      newUser.coins = 0;\n\t      newUser.username = email;\n\t      newUser.save(function(err) {\n          if (err) {\n          \tconsole.log(\"err after creation\");\n          \tconsole.log(err);\n            next(err);\n          }\n      \tconsole.log(newUser);\n      \tnext(null, newUser);\n\t      });\n\t     \n\t    });\n\n  \t});\n  }\n));\n\npassport.serializeUser(function(user, done) {\n        done(null, user.id);\n    });\npassport.deserializeUser(function(id, done) {\n        User.findById(id, function(err, user) {\n            done(err, user);\n        });\n    });\n\n// api routes v1\napp.use('/v1', routes);\n\n//socket stuff\nio.on('connection', (client) => {\n  var qrgenerator;\n  client.on('hostEvent', (event) => {\n    console.log(client.id+'-Hosting '+event.eventid+'. Interval: '+event.interval+' seconds');\n    var x = 0;\n    qrgenerator = setInterval(() => {\n      x+=1;\n      client.emit('qrcode', x);\n    }, event.interval);\n  });\n  client.on('disconnect', function(){\n      console.log( client.id + ' has disconnected');\n      clearInterval(qrgenerator);\n  });\n});\n\nconst port = 8000;\nio.listen(port);\nconsole.log('Magic is happening at port:', port);\n\napp.server.listen(config.port);\nconsole.log(`started the magic on port ${app.server.address().port}`);\n\nexport default app;"]}