{"version":3,"sources":["../../src/controller/badge.js"],"names":["config","db","api","post","req","res","next","console","log","user","id","findById","err","type","newBadge","name","body","description","category","tags","split","image","creator","save","status","json","success","message","error","get","find","badges","params","badge","put","delete","remove","rc","newIssue","issuer","_id","limit"],"mappings":"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","file":"badge.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Badge from '../model/badge';\nimport Issue from '../model/issue';\nimport User from '../model/user';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n\tlet api = Router();\n\n\t// 'v1/badge/add'\n\tapi.post('/add', authenticate, (req, res, next) => {\n\t\tconsole.log(req.user.id);\n\t\tUser.findById(req.user.id, (err, user) => {\n\t\t\tif (user.type == \"issuer\") {\n\t\t\t\tlet newBadge = new Badge();\n\t\t\t\tnewBadge.name = req.body.name;\n\t\t\t\tnewBadge.description = req.body.description;\n\t\t\t\tnewBadge.category = req.body.category;\n\t\t\t\tnewBadge.tags = req.body.tags ? req.body.tags.split(',') : [];\n\t\t\t\tnewBadge.image = req.body.image;\n\t\t\t\tnewBadge.creator = req.user.id;\n\t\t\t\tnewBadge.save(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tres.status(422).json({\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\tmessage: 'Badge saved successfully'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn res.status(401).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\terror: 'Not Authorized.'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\t// '/v1/badge/' - read\n\tapi.get('/', (req,res) => {\n\t\tBadge.find({}, (err, badges) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tres.status(200).json(badges);\n\t\t\t}\n\t\t});\n\t});\n\n\t// '/v1/badge/:id' - read 1\n\tapi.get('/:id', (req, res) => {\n\t\tBadge.findById(req.params.id, (err, badge) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tres.status(200).json(badge);\n\t\t\t}\n\t\t});\n\t});\n\n\t// '/v1/badge/:id' - update 1\n\tapi.put('/:id', authenticate, (req,res) => {\n\t\tBadge.findById(req.params.id, (err, badge) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else if (!badge){\n\t\t\t\t\treturn res.status(404).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\terror: 'Not Found.'\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t\tif (req.user.id == badge.creator) {\n\t\t\t\t\tbadge.name = req.body.name;\n\t\t\t\t\tbadge.description = req.body.description;\n\t\t\t\t\tbadge.category = req.body.category;\n\t\t\t\t\tbadge.tags = req.body.tags.split(',');\n\t\t\t\t\tbadge.image = req.body.image;\n\t\t\t\t\tbadge.save(err => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tres.status(422).json({\n\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\tmessage: \"Badge info updated\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\terror: 'Not Authorized.'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\t// '/v1/badge/:id' - delete\n\tapi.delete(\"/:id\", authenticate, (req, res) => {\n\t\tBadge.findById(req.params.id, (err, badge) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else if (!badge){\n\t\t\t\t\treturn res.status(404).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\terror: 'Not Found.'\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t\tif (req.user.id == badge.creator) {\n\t\t\t\t\tbadge.name = req.body.name;\n\t\t\t\t\tbadge.remove(err => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tres.status(422).json({\n\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\tmessage: \"Badge deleted\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\terror: 'Not Authorized.'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\t// '/v1/badge/issue/badgeid/userid\n\tapi.post('/issue/:id/:rc', authenticate, (req,res) => {\n\t\tBadge.findById(req.params.id, (err, badge) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else if (!badge){\n\t\t\t\t\treturn res.status(404).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\terror: 'Not Found.'\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif(req.user.id == badge.creator) {\n\t\t\t\t\tUser.findById(req.params.rc, (error, user) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tres.status(422).json({\n\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tlet newIssue = new Issue();\n\t\t\t\t\t\t\tnewIssue.issuer = req.user.id;\n\t\t\t\t\t\t\tnewIssue.user = user.id;\n\t\t\t\t\t\t\tnewIssue.badge = badge._id;\n\t\t\t\t\t\t\tif (badge.limit >= 1) {\n\t\t\t\t\t\t\t\tnewIssue.save((err) => {\n\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\tres.status(422).json({\n\t\t\t\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbadge.limit -= 1;\n\t\t\t\t\t\t\t\t\t\tbadge.save();\n\t\t\t\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\t\t\t\tmessage: 'Badge Issued!'\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\t\tmessage: 'Badge Limit Exceeded!'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\terror: 'Not Authorized.'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\treturn api;\n}"]}