{"version":3,"sources":["../../src/controller/host.js"],"names":["config","db","api","get","req","res","next","host","user","id","findById","params","err","event","status","json","success","message","owner","find","$exists","hosts","console","log","length","now","Date","end","qr","toString","substr","newHost","starttime","toISOString","save","post","newAttend","Attend","_id"],"mappings":"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","file":"host.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Event from '../model/event';\nimport Host from '../model/host';\nimport md5 from 'md5';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n\tlet api = Router();\n\n\n\t// for testing 'v1/host/test/:id'\n\tapi.get('/test/:id', authenticate, (req, res, next) => {\n\t\tlet host = req.user.id;\n\t\t// newEvent.name = req.body.name;\n\t\t// newEvent.description = req.body.description;\n\t\t// newEvent.category = req.body.category;\n\t\t// newEvent.location = req.body.location;\n\t\t// newEvent.starttime = new Date(req.body.starttime);\n\t\t// newEvent.endtime = new Date(req.body.endtime);\n\t\t// newEvent.image = req.body.image;\n\t\t// newEvent.owner = req.user.id;\n\t\tEvent.findById(req.params.id, (err, event) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif(event.owner == host) {\n\t\t\t\t\tHost.find({\n\t\t\t\t\t\t\"event\" : req.params.id,\n\t\t\t\t\t\t\"endtime\" : { $exists: false }\n\t\t\t\t\t}, (err, hosts) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tconsole.log('nothing found');\n\t\t\t\t\t\t\t//no active host found, create one then connect the sockets\n\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\tmessage: 'nothing found',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('found something');\n\t\t\t\t\t\t\t//found an active host\n\t\t\t\t\t\t\t//generate qr shit and connect the sockiets(happens in client)\n\t\t\t\t\t\t\tif(hosts.length>=1) {\n\t\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t\thosts: hosts[hosts.length-1]\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\tmessage: 'nothing found',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\tmessage: 'Not Authorized.'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\t// list of hosts - for testing /v1/host\n\tapi.get('/', (req,res) => {\n\t\tHost.find({}, (err, hosts) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tres.status(200).json(hosts);\n\t\t\t}\n\t\t});\n\t});\n\n\t// 'v1/host/id'\n\tapi.get('/:id', authenticate, (req, res, next) => {\n\t\tlet host = req.user.id;\n\t\t// newEvent.name = req.body.name;\n\t\t// newEvent.description = req.body.description;\n\t\t// newEvent.category = req.body.category;\n\t\t// newEvent.location = req.body.location;\n\t\t// newEvent.starttime = new Date(req.body.starttime);\n\t\t// newEvent.endtime = new Date(req.body.endtime);\n\t\t// newEvent.image = req.body.image;\n\t\t// newEvent.owner = req.user.id;\n\t\tEvent.findById(req.params.id, (err, event) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif(event.owner == host) {\n\n\t\t\t\t\t// 1. host.find(eventid) where end is not set\n\t\t\t\t\t// 2. if found, generate na ng qr and socket connect\n\t\t\t\t\t// 3. else, new host session., then back to step 2\n\t\t\t\t\t// may button pala sa host page na pwede i stop yung host, mag lagay lang ng end time.\n\n\t\t\t\t\tvar now = new Date();\n\t\t\t\t\tvar end = now;\n\t\t\t\t\tvar qr = md5(event.id.toString() + Date.now().toString());\n\t\t\t\t\tqr = qr.substr(qr.length - 5);\n\t\t\t\t\t// end.setHours(end.getHours() + 12);\n\t\t\t\t\tlet newHost = new Host();\n\t\t\t\t\tnewHost.event = event.id;\n\t\t\t\t\tnewHost.host = event.owner;\n\t\t\t\t\tnewHost.starttime = now.toISOString();\n\t\t\t\t\tnewHost.qr = qr;\n\t\t\t\t\tnewHost.save(err => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tres.status(422).json({\n\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\tmessage: 'Hosting',\n\t\t\t\t\t\t\t\tqr: newHost.qr\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\tmessage: 'Not Authorized.'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\t// // '/v1/event/' - read\n\t// api.get('/', (req,res) => {\n\t// \tEvent.find({}, (err, events) => {\n\t// \t\tif (err) {\n\t// \t\t\tres.status(422).json({\n\t// \t\t\t\tsuccess: false,\n\t// \t\t\t\tmessage: err.message\n\t// \t\t\t});\n\t// \t\t} else {\n\t// \t\t\tres.status(200).json(events);\n\t// \t\t}\n\t// \t});\n\t// });\n\n\t// '/v1/event/add/:id attend\n\tapi.post('/add/:id', authenticate, (req,res) => {\n\t\tEvent.findById(req.params.id, (err, event) => {\n\t\t\tif (err) {\n\t\t\t\tres.status(422).json({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t});\n\t\t\t} else if (!event){\n\t\t\t\t\treturn res.status(404).json({\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\tmessage: 'Not Found.'\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet newAttend = new Attend();\n\t\t\t\tnewAttend.user = req.user.id;\n\t\t\t\tnewAttend.event = event._id;\n\t\t\t\tnewAttend.save((err, event) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tres.status(422).json({\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\tmessage: 'Attendee Saved!'\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\treturn api;\n}"]}